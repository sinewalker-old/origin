* Origin: builds a new $HOME

#+BEGIN_QUOTE
*or•i•gin* /(ôrˈə-jĭn, ŏrˈ-)/

/n/. The point at which something comes into existence or from which it derives or is derived.

/n/. Ancestry: "We cannot escape our origins, however hard we try” (James Baldwin).

/n/. The fact of originating; rise or derivation: The rumor had its origin in an impulsive remark.

    -- The American Heritage® Dictionary of the English Language, 4th Edition
#+END_QUOTE

This little project will create a new =$HOME= directory tree for a clean computer system or a fresh user.  The tree structure follows [[http://milosophical.me/blog/2016/home-dir-maintenance.html][the home-directory specification on my blog]] with slight tweaks and adjustments based upon the host operating system.

It's intended to be used in the same spirit as [[https://github.com/sinewalker/dotfiles][my dotfiles]]: after a machine is built or a fresh user created, clone this repo' and then cast the spell to build a familiar home base.

Indeed one would probably clone several repo's and then run them:

 * [[https://github.com/sinewalker/dotfiles][dotfiles]] first, to have some familiar /feel/ to the shell and other utilities
 * [[https://github.com/sinewalker/installer][my tool-chain installer]], then use it to install /tools/ required on the new machine
 * /this/ *origin* /repo/, for setting up the /look/ of my =$HOME=
 * [[https://github.com/syl20bnr/spacemacs][spacemacs]] to install the [[http://spacemacs.org/][spacemacs]] emacs editor configuration base
 * [[https://github.com/sinewalker/dotspacemacs][dotspacemacs]] to configure /spacemacs/ to my personal preference


** Use

Early after creating a new =$HOME= (or =%USERPROFILE%=) directory on the host machine, follow these steps to build it out:

 1. Clone this repo (requires that =git= be installed)
#+BEGIN_SRC shell
$ git clone git@github.com:sinewalker/origin.git ~/Projects/origin
#+END_SRC
 2. Build the new =$HOME=:
#+BEGIN_SRC shell
$ ~/Projects/origin/go #Unix
#+END_SRC
or
#+BEGIN_SRC powershell
C:\Users\lockha> Projects\origin\go   #Windows (Powershell)
#+END_SRC

By using this command, the host operating will automatically launch the correct script to build this directory structure (Unix will run =~/Projects/origin/go=, whereas Windows will pick up =~\Projects\origin\go.ps1=)

** Directory structure

This is [[http://milosophical.me/blog/2016/home-dir-maintenance.html][specifed on my blog]].  The fine/current details are contained in the =nodes.json= configuration for this project.  I have deliberately separated the structure out from the mechanics of building appropriate directories and links so that if the repo' is forked, it can easily be customized to your own needs.

*** Directory node descriptions

In the configuration file (which is JSON), each node in the directory tree is specified like this:

#+BEGIN_SRC json
  {
      "node": {
          "name": "foo",
          "disposition": {
              "linux": {"link": "~/Foo"},
              "macos": "dir",
              "doors": null
          },
          "children": {
              "node": {
                  "name": "bar",
                  "disposition": {
                      "linux": "dir",
                      "macos": "dir",
                      "doors": "dir"
                  },
                  "children": null
              }
          }
      }
  }
#+END_SRC

Rather than list the same nodes multiple times for each operating system, each has a list of =disposition= values for each target OS we're building on.  The OS will be detected by the script and then the each node created according to the =disposition= for that OS.

*** Node dispositions

Node dispositions are grouped by operating systems.  The different OSes are:

 - =linux=: any flavour of Linux
 - =macos=: an Apple Macintosh
 - =doors=: Microsoft Windows (that's a Piers Anthony reference, and it makes 5 letters)

The different =disposition= values are:

 - =dir=: make a directory for this node
 - =link=: make a link to the node named in the value
 - =builtin=: this node should exist already, do nothing
 - =null=: do nothing (node not required on this OS)

If the node needs sub-directories/nodes, these are listed in =children=, if not then =children= is =null=.  The child nodes are specified in the same way, and may also have children.

** Hacking

It should be possible to fork this repo' and then change the =nodes.json= to meet your own requirements.  That would require no changes to the code, but possible extensions that /would/ require hacking the code might be:

 - *new operating systems* (maybe you have different node requirements for AmigaOS, or Solaris, which aren't implemented)
 - *more dispositions* (e.g. maybe bind-mounts, or Windows Joins?)
 - *different implementation languages* (maybe python or powershell aren't available on your platform)
